"use strict";(self.webpackChunkdocs_oasis_dev=self.webpackChunkdocs_oasis_dev||[]).push([[883],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return c}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),u=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},m=function(e){var n=u(e.components);return i.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=u(t),c=r,h=p["".concat(l,".").concat(c)]||p[c]||d[c]||o;return t?i.createElement(h,a(a({ref:n},m),{},{components:t})):i.createElement(h,a({ref:n},m))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var u=2;u<o;u++)a[u]=t[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1531:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return d}});var i=t(7462),r=t(3366),o=(t(7294),t(3905)),a=["components"],s={},l="ADR 0004: Runtime Governance",u={unversionedId:"0004-runtime-governance",id:"0004-runtime-governance",title:"ADR 0004: Runtime Governance",description:"Component",source:"@site/external/adrs/0004-runtime-governance.md",sourceDirName:".",slug:"/0004-runtime-governance",permalink:"/adrs/0004-runtime-governance",draft:!1,tags:[],version:"current",lastUpdatedAt:1654784293,formattedLastUpdatedAt:"6/9/2022",frontMatter:{},sidebar:"adrs",previous:{title:"ADR 0003: Consensus/Runtime Token Transfer",permalink:"/adrs/0003-consensus-runtime-token-transfer"},next:{title:"ADR 0005: Runtime Compute Node Slashing",permalink:"/adrs/0005-runtime-compute-slashing"}},m={},d=[{value:"Component",id:"component",level:2},{value:"Changelog",id:"changelog",level:2},{value:"Status",id:"status",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Runtime Descriptor",id:"runtime-descriptor",level:3},{value:"Governance Model",id:"governance-model",level:4},{value:"Entity Whitelist Admission Policy",id:"entity-whitelist-admission-policy",level:4},{value:"Minimum Required Committee Election Pool Size",id:"minimum-required-committee-election-pool-size",level:4},{value:"State",id:"state",level:3},{value:"Stored Runtime Descriptors",id:"stored-runtime-descriptors",level:4},{value:"Genesis Document",id:"genesis-document",level:3},{value:"Transaction Methods",id:"transaction-methods",level:3},{value:"Register Runtime",id:"register-runtime",level:4},{value:"Messages",id:"messages",level:3},{value:"Update Runtime Descriptor",id:"update-runtime-descriptor",level:4},{value:"Consensus Parameters",id:"consensus-parameters",level:3},{value:"Registry",id:"registry",level:4},{value:"Rust Runtime Support Library",id:"rust-runtime-support-library",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"References",id:"references",level:2}],p={toc:d};function c(e){var n=e.components,t=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"adr-0004-runtime-governance"},"ADR 0004: Runtime Governance"),(0,o.kt)("h2",{id:"component"},"Component"),(0,o.kt)("p",null,"Oasis Core"),(0,o.kt)("h2",{id:"changelog"},"Changelog"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"2020-10-07: Add per-role max node limits, minimum required election pool size"),(0,o.kt)("li",{parentName:"ul"},"2020-09-30: Add entity whitelist admission policy max nodes limit"),(0,o.kt)("li",{parentName:"ul"},"2020-09-17: Initial draft")),(0,o.kt)("h2",{id:"status"},"Status"),(0,o.kt)("p",null,"Accepted"),(0,o.kt)("h2",{id:"context"},"Context"),(0,o.kt)("p",null,"Currently all runtimes can only be governed by a single entity -- the runtime\nowner. In this regard governance means being able to update certain fields in\nthe runtime descriptor stored by the consensus layer registry service. On one\nhand the runtime descriptor contains security-critical parameters and on the\nother there needs to be a mechanism through which the runtimes can be upgraded\n(especially so for TEE-based runtimes where a specific runtime binary is\nenforced via remote attestation mechanisms)."),(0,o.kt)("p",null,"This proposal extends runtime governance options and enables a path towards\nruntimes that can define their own governance mechanisms. This proposal assumes\nthat ",(0,o.kt)("a",{parentName:"p",href:"/adrs/0003-consensus-runtime-token-transfer"},"ADR 0003")," has been adopted and runtimes can have their own accounts in the\nstaking module."),(0,o.kt)("h2",{id:"decision"},"Decision"),(0,o.kt)("p",null,"This proposal takes a simplistic but powerful approach which allows each runtime\nto choose its governance model upon its first registration. It does so through\na newly introduced field in the runtime descriptor which indicates how the\nruntime descriptor can be updated in the future."),(0,o.kt)("h3",{id:"runtime-descriptor"},"Runtime Descriptor"),(0,o.kt)("p",null,"The runtime descriptor version is bumped to ",(0,o.kt)("inlineCode",{parentName:"p"},"2"),". Version ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," descriptors are\naccepted at genesis and are converted to the new format by assuming the entity\ngovernance model as that is the only option in v1. All new runtime registrations\nmust use the v2 descriptor."),(0,o.kt)("h4",{id:"governance-model"},"Governance Model"),(0,o.kt)("p",null,"This proposal updates the runtime descriptor by adding fields as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'type Runtime struct {\n    // GovernanceModel specifies the runtime governance model.\n    GovernanceModel RuntimeGovernanceModel `json:"governance_model"`\n\n    // ... existing fields omitted ...\n}\n\n// RuntimeGovernanceModel specifies the runtime governance model.\ntype RuntimeGovernanceModel uint8\n\nconst (\n    GovernanceEntity    RuntimeGovernanceModel = 1\n    GovernanceRuntime   RuntimeGovernanceModel = 2\n    GovernanceConsensus RuntimeGovernanceModel = 3\n)\n\n// ... some text serialization methods omitted ...\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"governance_model")," field can specifiy one of the following governance\nmodels:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Entity governance (",(0,o.kt)("inlineCode",{parentName:"strong"},"GovernanceEntity"),").")," This causes the runtime to behave\nexactly as before, the runtime owner (indicated by ",(0,o.kt)("inlineCode",{parentName:"p"},"entity_id")," in the runtime\ndescriptor) is the only one who can update the runtime descriptor via\n",(0,o.kt)("inlineCode",{parentName:"p"},"registry.RegisterRuntime")," method calls."),(0,o.kt)("p",{parentName:"li"},"The runtime owner is also the one that needs to provide the required stake\nin escrow in order to avoid the runtime from being suspended. As before note\nthat anyone can delegate the required stake to the runtime owner in order to\nenable runtime operation (but the owner can always prevent the runtime from\noperating by performing actions which would cause the stake claims to no\nlonger be satisfied).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Runtime-defined governance (",(0,o.kt)("inlineCode",{parentName:"strong"},"GovernanceRuntime"),").")," In this case the runtime\nitself is the only one who can update the runtime descriptor by emitting a\nruntime message. The runtime owner (indicated by ",(0,o.kt)("inlineCode",{parentName:"p"},"entity_id"),") is not able to\nperform any updates after the initial registration and such attempts must\nreturn ",(0,o.kt)("inlineCode",{parentName:"p"},"ErrForbidden"),"."),(0,o.kt)("p",{parentName:"li"},"The runtime itself is the one that needs to provide the required stake in\nescrow in order to avoid the runtime from being suspended. This assumes that\nruntimes can have accounts in the staking module as specified by ",(0,o.kt)("a",{parentName:"p",href:"/adrs/0003-consensus-runtime-token-transfer"},"ADR 0003"),".\nNote that anyone can delegate the required stake to a runtime in order to\nenable its operation.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Consensus layer governance (",(0,o.kt)("inlineCode",{parentName:"strong"},"GovernanceConsensus"),").")," In this case only the\nconsensus layer itself can update the runtime descriptor either through a\nnetwork upgrade or via a consensus layer governance mechanism not specified by\nthis proposal."),(0,o.kt)("p",{parentName:"li"},"Runtimes using this governance model are never suspended and do not need to\nprovide stake in escrow."),(0,o.kt)("p",{parentName:"li"},"Runtimes using this governance model cannot be registered/updated via regular\nregistry method calls or runtime messages (doing so must return\n",(0,o.kt)("inlineCode",{parentName:"p"},"ErrForbidden"),"). Instead such a runtime can only be registered at genesis,\nthrough a network upgrade or via a consensus layer governance mechanism not\nspecified by this proposal."))),(0,o.kt)("h4",{id:"entity-whitelist-admission-policy"},"Entity Whitelist Admission Policy"),(0,o.kt)("p",null,"The entity whitelist admission policy configuration structure is changed to\nallow specifying the maximum number of nodes that each entity can register under\nthe given runtime for each role."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'type EntityWhitelistConfig struct {\n    // MaxNodes is the maximum number of nodes that an entity can register under\n    // the given runtime for a specific role. If the map is empty or absent, the\n    // number of nodes is unlimited. If the map is present and non-empty, the\n    // the number of nodes is restricted to the specified maximum (where zero\n    // means no nodes allowed), any missing roles imply zero nodes.\n    MaxNodes map[node.RolesMask]uint16 `json:"max_nodes,omitempty"`\n}\n\ntype EntityWhitelistRuntimeAdmissionPolicy struct {\n    Entities map[signature.PublicKey]EntityWhitelistConfig `json:"entities"`\n}\n')),(0,o.kt)("p",null,"The new ",(0,o.kt)("inlineCode",{parentName:"p"},"max_nodes")," field specifies the maximum number of nodes an entity can\nregister for the given runtime for each role. If the map is empty or absent, the\nnumber of nodes is unlimited. If the map is present and non-empty, the number of\nnodes is restricted to the specified number (where zero means no nodes are\nallowed). Any missing roles imply zero nodes."),(0,o.kt)("p",null,"Each key (roles mask) in the ",(0,o.kt)("inlineCode",{parentName:"p"},"max_nodes")," map must specify a single role,\notherwise the runtime descriptor is rejected with ",(0,o.kt)("inlineCode",{parentName:"p"},"ErrInvalidArgument"),"."),(0,o.kt)("p",null,"When transforming runtime descriptors from version 1, an entry in the ",(0,o.kt)("inlineCode",{parentName:"p"},"entities"),"\nfield maps to an ",(0,o.kt)("inlineCode",{parentName:"p"},"EntityWhitelistConfig")," structure with ",(0,o.kt)("inlineCode",{parentName:"p"},"max_nodes")," absent,\ndenoting that an unlimited number of nodes is allowed (as before)."),(0,o.kt)("h4",{id:"minimum-required-committee-election-pool-size"},"Minimum Required Committee Election Pool Size"),(0,o.kt)("p",null,"The executor and storage runtime parameters are updated to add a new field\ndefining the minimum required committee election pool size. The committee\nscheduler is updated to refuse election for a given runtime committee in case\nthe number of candidate nodes is less than the configured minimum pool size."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},'type ExecutorParameters struct {\n    // MinPoolSize is the minimum required candidate compute node pool size.\n    MinPoolSize uint64 `json:"min_pool_size"`\n\n    // ... existing fields omitted ...\n}\n\ntype StorageParameters struct {\n    // MinPoolSize is the minimum required candidate storage node pool size.\n    MinPoolSize uint64 `json:"min_pool_size"`\n\n    // ... existing fields omitted ...\n}\n')),(0,o.kt)("p",null,"The value of ",(0,o.kt)("inlineCode",{parentName:"p"},"min_pool_size")," must be non-zero and must be equal to or greater\nthan the corresponding sum of ",(0,o.kt)("inlineCode",{parentName:"p"},"group_size")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"group_backup_size"),". Otherwise\nthe runtime descriptor is rejected with ",(0,o.kt)("inlineCode",{parentName:"p"},"ErrInvalidArgument"),"."),(0,o.kt)("p",null,"When transforming runtime descriptors from version 1, ",(0,o.kt)("inlineCode",{parentName:"p"},"min_pool_size")," for the\nexecutor committee is computed as ",(0,o.kt)("inlineCode",{parentName:"p"},"group_size + group_backup_size")," while the\n",(0,o.kt)("inlineCode",{parentName:"p"},"min_pool_size")," for the storage committee is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"group_size"),"."),(0,o.kt)("h3",{id:"state"},"State"),(0,o.kt)("p",null,"This proposal introduces/updates the following consensus state in the registry\nmodule:"),(0,o.kt)("h4",{id:"stored-runtime-descriptors"},"Stored Runtime Descriptors"),(0,o.kt)("p",null,"Since the runtime descriptors can now be updated by actors other than the\ninitial registering entity, it does not make sense to store signed runtime\ndescriptors. The value of storage key prefixed with ",(0,o.kt)("inlineCode",{parentName:"p"},"0x13")," which previously\ncontained signed runtime descriptors is modified to store plain runtime\ndescriptors."),(0,o.kt)("h3",{id:"genesis-document"},"Genesis Document"),(0,o.kt)("p",null,"This proposal updates the registry part of the genesis document as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The type of the ",(0,o.kt)("inlineCode",{parentName:"p"},"runtimes")," field is changed to a list of runtime descriptors\n(was a list of ",(0,o.kt)("em",{parentName:"p"},"signed")," runtime descriptors before).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The type of the ",(0,o.kt)("inlineCode",{parentName:"p"},"suspended_runtimes")," field is changed to a list of runtime\ndescriptors (was a list of ",(0,o.kt)("em",{parentName:"p"},"signed")," runtime descriptors before)."))),(0,o.kt)("p",null,"Runtime descriptors must be transformed to support the new fields."),(0,o.kt)("h3",{id:"transaction-methods"},"Transaction Methods"),(0,o.kt)("p",null,"This proposal updates the following transaction methods in the registry module:"),(0,o.kt)("h4",{id:"register-runtime"},"Register Runtime"),(0,o.kt)("p",null,"Runtime registration enables a new runtime to be created or an existing runtime\nto be updated (in case the governance model allows it)."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Method name:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"registry.RegisterRuntime\n")),(0,o.kt)("p",null,"The body of a register runtime transaction must be a ",(0,o.kt)("inlineCode",{parentName:"p"},"Runtime")," descriptor.\nThe signer of the transaction must be the owning entity key."),(0,o.kt)("p",null,"Registering a runtime may require sufficient stake in either the owning entity's\n(when entity governance is used) or the runtime's (when runtime governance is\nused) escrow account."),(0,o.kt)("p",null,"Changing the governance model from ",(0,o.kt)("inlineCode",{parentName:"p"},"GovernanceEntity")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"GovernanceRuntime")," is\nallowed. Any other governance model changes are not allowed and must fail with\n",(0,o.kt)("inlineCode",{parentName:"p"},"ErrForbidden"),". Support for other changes is deferred to a consensus layer\ngovernance mechanism not specified by this proposal."),(0,o.kt)("p",null,"Using the ",(0,o.kt)("inlineCode",{parentName:"p"},"GovernanceRuntime")," governance model for a runtime of any kind other\nthan ",(0,o.kt)("inlineCode",{parentName:"p"},"KindCompute")," must return ",(0,o.kt)("inlineCode",{parentName:"p"},"ErrInvalidArgument"),"."),(0,o.kt)("h3",{id:"messages"},"Messages"),(0,o.kt)("p",null,"This proposal introduces the following runtime messages:"),(0,o.kt)("h4",{id:"update-runtime-descriptor"},"Update Runtime Descriptor"),(0,o.kt)("p",null,"The update runtime descriptor message enables a runtime to update its own\ndescriptor when the current governance model allows it."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Field name:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"update_runtime\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Body:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-golang"},"type UpdateRuntimeMessage struct {\n    registry.Runtime\n}\n")),(0,o.kt)("p",null,"The body of the update runtime descriptor message is a new runtime descriptor\nthat must be for the runtime emitting this message. Otherwise the message is\nconsidered malformed."),(0,o.kt)("p",null,"The actions performed when processing the message are the same as those\nperformed when processing the ",(0,o.kt)("inlineCode",{parentName:"p"},"registry.RegisterRuntime")," method call, just made\non the runtime's (instead of an entity's) behalf."),(0,o.kt)("h3",{id:"consensus-parameters"},"Consensus Parameters"),(0,o.kt)("h4",{id:"registry"},"Registry"),(0,o.kt)("p",null,"This proposal introduces the following new consensus parameters in the registry\nmodule:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"enable_runtime_governance_models")," (set of ",(0,o.kt)("inlineCode",{parentName:"li"},"RuntimeGovernanceModel"),") specifies\nthe set of runtime governance models that are allowed to be used when\ncreating/updating registrations (either via method calls or via runtime\nmessages). In case a runtime is using a governance model not specified in this\nlist, an update to such a runtime must fail with ",(0,o.kt)("inlineCode",{parentName:"li"},"ErrForbidden"),".")),(0,o.kt)("h3",{id:"rust-runtime-support-library"},"Rust Runtime Support Library"),(0,o.kt)("p",null,"The Rust runtime support library (",(0,o.kt)("inlineCode",{parentName:"p"},"oasis-core-runtime"),") must be updated to\nsupport the updated and newly needed message structures (the runtime descriptor\nand the update runtime message)."),(0,o.kt)("h2",{id:"consequences"},"Consequences"),(0,o.kt)("h3",{id:"positive"},"Positive"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Runtimes can define their governance model, enabling them to become more\ndecentralized while still allowing upgrades.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Runtimes using the entity whitelist admission policy can limit the number of\nnodes that each entity can register.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Runtimes can specify the minimum size of the compute/storage node pool from\nwhich committees are elected."))),(0,o.kt)("h3",{id:"negative"},"Negative"),(0,o.kt)("h3",{id:"neutral"},"Neutral"),(0,o.kt)("h2",{id:"references"},"References"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/adrs/0003-consensus-runtime-token-transfer"},"ADR 0003")," - Consensus/Runtime Token Transfer")))}c.isMDXComponent=!0}}]);