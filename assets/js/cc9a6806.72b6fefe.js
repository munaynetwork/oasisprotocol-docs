"use strict";(self.webpackChunkdocs_oasis_dev=self.webpackChunkdocs_oasis_dev||[]).push([[3151],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,k=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(k,s(s({ref:t},p),{},{components:n})):r.createElement(k,s({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5273:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return u}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),s=["components"],o={},c="Transaction Test Vectors",l={unversionedId:"consensus/test-vectors",id:"consensus/test-vectors",title:"Transaction Test Vectors",description:"In order to test transaction generation, parsing and signing, we provide a set",source:"@site/external/oasis-core/docs/consensus/test-vectors.md",sourceDirName:"consensus",slug:"/consensus/test-vectors",permalink:"/oasis-core/consensus/test-vectors",draft:!1,tags:[],version:"current",lastUpdatedAt:1655201825,formattedLastUpdatedAt:"6/14/2022",frontMatter:{},sidebar:"oasisCore",previous:{title:"Genesis Document",permalink:"/oasis-core/consensus/genesis"},next:{title:"Runtime Layer",permalink:"/oasis-core/runtime/"}},p={},u=[{value:"Structure",id:"structure",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"transaction-test-vectors"},"Transaction Test Vectors"),(0,i.kt)("p",null,"In order to test transaction generation, parsing and signing, we provide a set\nof test vectors. They can be generated for the following consensus services:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/oasis-core/consensus/services/staking#test-vectors"},"Staking")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/oasis-core/consensus/services/registry#test-vectors"},"Registry")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/oasis-core/consensus/services/governance#test-vectors"},"Governance"))),(0,i.kt)("h2",{id:"structure"},"Structure"),(0,i.kt)("p",null,"The generated test vectors file is a JSON document which provides an array of\nobjects (test vectors). Each test vector has the following fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"kind")," is a human-readable string describing what kind of a transaction the\ngiven test vector is describing (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},'"Transfer"'),").")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"signature_context")," is the ",(0,i.kt)("a",{parentName:"p",href:"/oasis-core/crypto#domain-separation"},"domain separation context")," used for signing the\ntransaction.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"tx")," is the human-readable ",(0,i.kt)("em",{parentName:"p"},"interpreted")," unsigned transaction. Its purpose is\nto make it easier for the implementer to understand what the content of the\ntransaction is. ",(0,i.kt)("strong",{parentName:"p"},"It does not contain the structure that can be serialized\ndirectly (e.g., ","[addresses]"," may be represented as Bech32-encoded strings while\nin the ",(0,i.kt)("a",{parentName:"strong",href:"/oasis-core/encoding"},"encoded")," transaction, these would be binary blobs)."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"signed_tx")," is the human-readable signed transaction to make it easier for the\nimplementer to understand how the ",(0,i.kt)("a",{parentName:"p",href:"/oasis-core/crypto#envelopes"},"signature envelope")," looks like.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"encoded_tx")," is the CBOR-encoded (since test vectors are in JSON and CBOR\nencoding is a binary encoding it also needs to be Base64-encoded) unsigned\ntransaction.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"encoded_signed_tx")," is the CBOR-encoded (since test vectors are in JSON and\nCBOR encoding is a binary encoding it also needs to be Base64-encoded) signed\ntransaction. ",(0,i.kt)("strong",{parentName:"p"},"This is what is actually broadcast to the network."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"valid")," is a boolean flag indicating whether the given test vector represents\na valid transaction, including:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"transaction having a valid signature,"),(0,i.kt)("li",{parentName:"ul"},"transaction being correctly serialized,"),(0,i.kt)("li",{parentName:"ul"},"transaction passing basic static validation.")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"NOTE: Even if a transaction passes basic static validation, it may still\n",(0,i.kt)("strong",{parentName:"em"},"not")," be a valid transaction on the given network due to invalid nonce, or\ndue to some specific parameters set on the network."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"signer_private_key")," is the Ed25519 private key that was used to sign the\ntransaction in the test vector.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"signer_public_key")," is the Ed25519 public key corresponding to\n",(0,i.kt)("inlineCode",{parentName:"p"},"signer_private_key"),"."))))}m.isMDXComponent=!0}}]);