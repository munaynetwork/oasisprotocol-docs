"use strict";(self.webpackChunkdocs_oasis_dev=self.webpackChunkdocs_oasis_dev||[]).push([[6613],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=i,f=d["".concat(s,".").concat(m)]||d[m]||c[m]||a;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},594:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=["components"],l={},s="Versioning",p={unversionedId:"versioning",id:"versioning",title:"Versioning",description:"Oasis Core Ledger uses [Semantic Versioning 2.0.0] with the following format:",source:"@site/external/oasis-core-ledger/docs/versioning.md",sourceDirName:".",slug:"/versioning",permalink:"/oasis-core-ledger/versioning",draft:!1,tags:[],version:"current",lastUpdatedAt:1648153797,formattedLastUpdatedAt:"3/24/2022",frontMatter:{},sidebar:"oasisSdk",previous:{title:"Identifying Wallets",permalink:"/oasis-core-ledger/usage/wallets"},next:{title:"Release Process",permalink:"/oasis-core-ledger/release-process"}},u={},c=[],d={toc:c};function m(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"versioning"},"Versioning"),(0,a.kt)("p",null,"Oasis Core Ledger uses ",(0,a.kt)("a",{parentName:"p",href:"https://semver.org/spec/v2.0.0.html"},"Semantic Versioning 2.0.0")," with the following format:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"MAJOR.MINOR.PATCH[-MODIFIER]\n")),(0,a.kt)("p",null,"where:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"MAJOR")," represents the major version starting with zero (e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"0"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"2"),",\n",(0,a.kt)("inlineCode",{parentName:"li"},"3"),", ...),"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"MINOR")," represents the minor version starting with zero (e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"0"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"2"),",\n",(0,a.kt)("inlineCode",{parentName:"li"},"3"),", ...),"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"PATCH"),' represents the final number in the version (sometimes referred\nto as the "micro" segment) (e.g. ',(0,a.kt)("inlineCode",{parentName:"li"},"0"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"2"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"3"),", ...)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"MODIFIER")," represents (optional) build metadata, e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"git8c01382"),".")),(0,a.kt)("p",null,"When a backwards incompatible release is made, the ",(0,a.kt)("inlineCode",{parentName:"p"},"MAJOR")," version should be\nbumped."),(0,a.kt)("p",null,"When a regularly scheduled release is made, the ",(0,a.kt)("inlineCode",{parentName:"p"},"MINOR")," version should be\nbumped."),(0,a.kt)("p",null,"If there are fixes and (backwards compatible) changes that we want to back-port\nfrom an upcoming release, then the ",(0,a.kt)("inlineCode",{parentName:"p"},"PATCH")," version should be bumped."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"MODIFIER")," should be used to denote a build from an untagged (and\npotentially unclean) git source. It should be of the form:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"gitCOMMIT_SHA[+dirty]\n")),(0,a.kt)("p",null,"where:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"COMMIT_SHA")," represents the current commit\u2019s abbreviated SHA.")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"+dirty")," part is optional and is only present if there are uncommitted\nchanges in the working directory."))}m.isMDXComponent=!0}}]);