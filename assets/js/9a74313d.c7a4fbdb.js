"use strict";(self.webpackChunkdocs_oasis_dev=self.webpackChunkdocs_oasis_dev||[]).push([[7586],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,y=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(y,i(i({ref:t},p),{},{components:n})):r.createElement(y,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1147:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={},c="Key Manager",l={unversionedId:"consensus/services/keymanager",id:"consensus/services/keymanager",title:"Key Manager",description:"The key manager service is responsible for coordinating the SGX-based key",source:"@site/external/oasis-core/docs/consensus/services/keymanager.md",sourceDirName:"consensus/services",slug:"/consensus/services/keymanager",permalink:"/oasis-core/consensus/services/keymanager",draft:!1,tags:[],version:"current",lastUpdatedAt:1655201825,formattedLastUpdatedAt:"6/14/2022",frontMatter:{},sidebar:"oasisCore",previous:{title:"Root Hash",permalink:"/oasis-core/consensus/services/roothash"},next:{title:"Genesis Document",permalink:"/oasis-core/consensus/genesis"}},p={},u=[{value:"Policies",id:"policies",level:2},{value:"Methods",id:"methods",level:2},{value:"Update Policy",id:"update-policy",level:3},{value:"Events",id:"events",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"key-manager"},"Key Manager"),(0,o.kt)("p",null,"The key manager service is responsible for coordinating the SGX-based key\nmanager runtimes. It stores and publishes policy documents and status updates\nrequired for key manager replication."),(0,o.kt)("p",null,"The service interface definition lives in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/oasisprotocol/oasis-core/tree/master/go/keymanager/api"},(0,o.kt)("inlineCode",{parentName:"a"},"go/keymanager/api")),". It defines the\nsupported queries and transactions. For more information you can also check out\nthe ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/keymanager/api?tab=doc"},"consensus service API documentation"),"."),(0,o.kt)("h2",{id:"policies"},"Policies"),(0,o.kt)("p",null,"A key manager policy document defines the policy that key manager\nimplementations use to enforce access control to key material. At this point the\npolicy document is specifically designed to work with our Intel SGX-based key\nmanager runtime."),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/keymanager/api?tab=doc#PolicySGX"},"policy document")," specifies the following access control policies that are\nenforced by the key manager runtime based on the calling enclave identity:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Enclaves that may query private keys.")," These are usually enclave identities\nof confidential runtimes that need access to per-runtime private keys to\ndecrypt state.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Enclaves that may replicate the master secret.")," These are usually enclave\nidentities of new key manager enclave versions, to support upgrades. Own\nenclave identity is implied (to allow key manager replication) and does not\nneed to be explicitly specified."))),(0,o.kt)("p",null,"In order for the policy to be valid and accepted by a key manager enclave it\nmust be signed by a configured threshold of keys. Both the threshold and the\nauthorized public keys that can sign the policy are hardcoded in the key manager\nenclave."),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("h3",{id:"update-policy"},"Update Policy"),(0,o.kt)("p",null,"Policy update enables the key manager runtime owning entity to update the\ncurrent key manager policy. A new update policy transaction can be generated\nusing ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/keymanager/api?tab=doc#NewUpdatePolicyTx"},(0,o.kt)("inlineCode",{parentName:"a"},"NewUpdatePolicyTx")),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Method name:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"keymanager.UpdatePolicy\n")),(0,o.kt)("p",null,"The body of an update policy transaction must be a ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/keymanager/api?tab=doc#SignedPolicySGX"},(0,o.kt)("inlineCode",{parentName:"a"},"SignedPolicySGX"))," which is\na signed key manager access control policy. The signer of the transaction must\nbe the key manager runtime's owning entity."),(0,o.kt)("h2",{id:"events"},"Events"))}m.isMDXComponent=!0}}]);